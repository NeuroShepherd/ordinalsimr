[{"path":"https://neuroshepherd.github.io/ordinalsimr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 ordinalsimr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"coding-your-own-simulations","dir":"Articles","previous_headings":"","what":"Coding Your Own Simulations","title":"Coding Simulations","text":"guide provide rough overview code simulations using components package find Shiny application limiting purposes. Key information functions: run_simulations() take simulation input parameters return named list tibbles. tibble represents results simulation given sample size, names e.g. “sample_size_32”. bind_rows() used combine tibbles single tibble. calculate_power_t2error() calculate_t1_error() can receive p-value data frames performing T1 Error, Power, T2 Error calculations confidence intervals. See function documentation additional arguments.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"power-and-type-ii-error","dir":"Articles","previous_headings":"Coding Your Own Simulations","what":"Power and Type II Error","title":"Coding Simulations","text":"","code":"sim_results <- run_simulations(   sample_size = 80,   sample_prob = c(0.5, 0.5),   prob0 = c(0.1, 0.2, 0.3, 0.4),   prob1 = c(0.6, 0.2, 0.1, 0.1),   niter = 20 )  formatted_results <- dplyr::bind_rows(sim_results) names(formatted_results) #>  [1] \"Wilcoxon\"                    \"Fisher\"                      #>  [3] \"Chi Squared (No Correction)\" \"Chi Squared (Correction)\"    #>  [5] \"Prop. Odds\"                  \"Coin Indep. Test\"            #>  [7] \"run\"                         \"y\"                           #>  [9] \"x\"                           \"n_null\"                      #> [11] \"n_intervene\"                 \"sample_size\"                 #> [13] \"K\"  formatted_results %>%   dplyr::select(     Wilcoxon, Fisher, `Chi Squared (No Correction)`,     `Chi Squared (Correction)`, `Prop. Odds`,     `Coin Indep. Test`,     sample_size   ) %>%   calculate_power_t2error(alpha = 0.05, power_confidence_int = 95) #> # A tibble: 6 × 10 #> # Groups:   Sample Size [1] #>   `Sample Size` test    lower_power_bound upper_power_bound power `Power 95% CI` #>           <dbl> <chr>               <dbl>             <dbl> <dbl> <chr>          #> 1            80 Wilcox…             0.832                 1     1 [0.832, 1]     #> 2            80 Fisher              0.832                 1     1 [0.832, 1]     #> 3            80 Chi Sq…             0.832                 1     1 [0.832, 1]     #> 4            80 Chi Sq…             0.832                 1     1 [0.832, 1]     #> 5            80 Prop. …             0.832                 1     1 [0.832, 1]     #> 6            80 Coin I…             0.832                 1     1 [0.832, 1]     #> # ℹ 4 more variables: lower_t2error_bound <dbl>, upper_t2error_bound <dbl>, #> #   t2_error <dbl>, `TII Error 95% CI` <chr>"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"type-i-error","dir":"Articles","previous_headings":"Coding Your Own Simulations","what":"Type I Error","title":"Coding Simulations","text":"find Type error distribution, code largely unchanged except fact probability vectors set run_simulations must now equivalent calculate_t1_error() function now applied.","code":"sim_results <- run_simulations(   sample_size = 30:35,   sample_prob = c(0.5, 0.5),   prob0 = c(.4, .3, .3),   prob1 = c(.8, .1, .1), # note the matching probabilities between groups   niter = 50 )  formatted_results <- dplyr::bind_rows(sim_results) names(formatted_results) #>  [1] \"Wilcoxon\"                    \"Fisher\"                      #>  [3] \"Chi Squared (No Correction)\" \"Chi Squared (Correction)\"    #>  [5] \"Prop. Odds\"                  \"Coin Indep. Test\"            #>  [7] \"run\"                         \"y\"                           #>  [9] \"x\"                           \"n_null\"                      #> [11] \"n_intervene\"                 \"sample_size\"                 #> [13] \"K\"   formatted_results %>%   dplyr::select(     Wilcoxon, Fisher, `Chi Squared (No Correction)`,     `Chi Squared (Correction)`, `Prop. Odds`,     `Coin Indep. Test`,     sample_size   ) %>%   calculate_t1_error(alpha = 0.05, t1_error_confidence_int = 95) #> # A tibble: 36 × 6 #> # Groups:   Sample Size [6] #>    `Sample Size` test            lower_t1_bound upper_t1_bound t1_error `95% CI` #>            <int> <chr>                    <dbl>          <dbl>    <dbl> <chr>    #>  1            30 Wilcoxon                 0.452          0.736     0.6  [0.452,… #>  2            30 Fisher                   0.355          0.645     0.5  [0.355,… #>  3            30 Chi Squared (N…          0.374          0.663     0.52 [0.374,… #>  4            30 Chi Squared (C…          0.374          0.663     0.52 [0.374,… #>  5            30 Prop. Odds               0.472          0.753     0.62 [0.472,… #>  6            30 Coin Indep. Te…          0.472          0.753     0.62 [0.472,… #>  7            31 Wilcoxon                 0.512          0.788     0.66 [0.512,… #>  8            31 Fisher                   0.337          0.626     0.48 [0.337,… #>  9            31 Chi Squared (N…          0.374          0.663     0.52 [0.374,… #> 10            31 Chi Squared (C…          0.374          0.663     0.52 [0.374,… #> # ℹ 26 more rows"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"mapping-over-many-sample-sizes","dir":"Articles","previous_headings":"Coding Your Own Simulations","what":"Mapping Over Many Sample Sizes","title":"Coding Simulations","text":"current version Shiny application can accept range sample sizes. However, may find useful iterate discrete set sample sizes calculate Power Type II error rather range. can save time computation power interested specific sample sizes. Depending big number iterations per sample sizes (niter) actual number sample sizes checked, may practical parallelized manner e.g. {furrr} {parallel}. case, example code included : ’re {purrr} person:","code":"# Create a vector of sample sizes sample_sizes <- c(30, 50, 100)  # Map over the sample sizes lapply(sample_sizes, function(x) {   run_simulations(     sample_size = x,     sample_prob = c(0.5, 0.5),     prob0 = c(0.1, 0.2, 0.3, 0.4),     prob1 = c(0.6, 0.2, 0.1, 0.1),     niter = 100   ) %>%     dplyr::bind_rows() %>%     dplyr::select(       Wilcoxon, Fisher, `Chi Squared (No Correction)`,       `Chi Squared (Correction)`, `Prop. Odds`,       `Coin Indep. Test`, sample_size     ) %>%     calculate_power_t2error() }) #> [[1]] #> # A tibble: 6 × 10 #> # Groups:   Sample Size [1] #>   `Sample Size` test    lower_power_bound upper_power_bound power `Power 95% CI` #>           <dbl> <chr>               <dbl>             <dbl> <dbl> <chr>          #> 1            30 Wilcox…             0.765             0.914  0.85 [0.765, 0.914] #> 2            30 Fisher              0.643             0.823  0.74 [0.643, 0.823] #> 3            30 Chi Sq…             0.600             0.788  0.7  [0.6, 0.788]   #> 4            30 Chi Sq…             0.600             0.788  0.7  [0.6, 0.788]   #> 5            30 Prop. …             0.788             0.929  0.87 [0.788, 0.929] #> 6            30 Coin I…             0.765             0.914  0.85 [0.765, 0.914] #> # ℹ 4 more variables: lower_t2error_bound <dbl>, upper_t2error_bound <dbl>, #> #   t2_error <dbl>, `TII Error 95% CI` <chr> #>  #> [[2]] #> # A tibble: 6 × 10 #> # Groups:   Sample Size [1] #>   `Sample Size` test    lower_power_bound upper_power_bound power `Power 95% CI` #>           <dbl> <chr>               <dbl>             <dbl> <dbl> <chr>          #> 1            50 Wilcox…             0.930             0.998  0.98 [0.93, 0.998]  #> 2            50 Fisher              0.887             0.984  0.95 [0.887, 0.984] #> 3            50 Chi Sq…             0.874             0.978  0.94 [0.874, 0.978] #> 4            50 Chi Sq…             0.874             0.978  0.94 [0.874, 0.978] #> 5            50 Prop. …             0.930             0.998  0.98 [0.93, 0.998]  #> 6            50 Coin I…             0.930             0.998  0.98 [0.93, 0.998]  #> # ℹ 4 more variables: lower_t2error_bound <dbl>, upper_t2error_bound <dbl>, #> #   t2_error <dbl>, `TII Error 95% CI` <chr> #>  #> [[3]] #> # A tibble: 6 × 10 #> # Groups:   Sample Size [1] #>   `Sample Size` test    lower_power_bound upper_power_bound power `Power 95% CI` #>           <dbl> <chr>               <dbl>             <dbl> <dbl> <chr>          #> 1           100 Wilcox…             0.964                 1     1 [0.964, 1]     #> 2           100 Fisher              0.964                 1     1 [0.964, 1]     #> 3           100 Chi Sq…             0.964                 1     1 [0.964, 1]     #> 4           100 Chi Sq…             0.964                 1     1 [0.964, 1]     #> 5           100 Prop. …             0.964                 1     1 [0.964, 1]     #> 6           100 Coin I…             0.964                 1     1 [0.964, 1]     #> # ℹ 4 more variables: lower_t2error_bound <dbl>, upper_t2error_bound <dbl>, #> #   t2_error <dbl>, `TII Error 95% CI` <chr> sample_sizes %>%   purrr::map(     ~run_simulations(       sample_size = .x,       sample_prob = c(0.5, 0.5),       prob0 = c(0.1, 0.2, 0.3, 0.4),       prob1 = c(0.6, 0.2, 0.1, 0.1),       niter = 100       ) %>%       bind_rows() %>%       select(Wilcoxon, Fisher, `Chi Squared\\n(No Correction)`,             `Chi Squared\\n(Correction)`, `Prop. Odds`,             `Coin Indep. Test`, sample_size) %>%       calculate_power_t2error() )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"adjust-multiple-parameters","dir":"Articles","previous_headings":"Coding Your Own Simulations","what":"Adjust Multiple Parameters","title":"Coding Simulations","text":"perhaps likely analysts want iterate simulations variety different parameters . code provides structure creating combination grid based 5 input parameters can altered; example can easily altered include desired parameters replacing/removing/expanding listed parameters.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"set-parameters","dir":"Articles","previous_headings":"Coding Your Own Simulations > Adjust Multiple Parameters","what":"Set Parameters","title":"Coding Simulations","text":"Note prob0_list prob1_list must always length corresponding sub-elements list must also length. Put terms application, must Group 2 Group 1, vector representing number possible outcomes must length 2 groups. performing simulations one distribution evaluate Type error, necessary form one probability list. object can recycled probabilities groups.","code":"# Choose sample sizes sample_size <- c(50, 100) # Set sample distributions as a proportion c(group1, group2) sample_prob <- list(c(0.5, 0.5), c(0.75, 0.25)) # Trial 1 has matching probabilities between the 2 groups. Trial 2 has non-matching probabilities prob0_list <- list(trial1_group1 = c(0.1, 0.2, 0.3, 0.4), trial2_group1 = c(0.1, 0.2, 0.3, 0.4)) prob1_list <- list(trial1_group2 = c(0.1, 0.2, 0.3, 0.4), trial2_group2 = c(0.2, 0.3, 0.3, 0.2)) # Number of iterations niter <- c(20, 100)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"create-simulation-grid","dir":"Articles","previous_headings":"Coding Your Own Simulations > Adjust Multiple Parameters","what":"Create Simulation Grid","title":"Coding Simulations","text":"Use tidyr::expand_grid() rather base:expand.grid() former creates tibble default, supports nested tibble structure ’m relying . (can, course, approached ways desired.)","code":"# Use tidyr::expand_grid as it creates a tibble, supporting the nested tibble structure info_table <- tidyr::expand_grid(   sample_size,   sample_prob,   prob0_list,   prob1_list,   niter )  info_table #> # A tibble: 32 × 5 #>    sample_size sample_prob prob0_list   prob1_list   niter #>          <dbl> <list>      <named list> <named list> <dbl> #>  1          50 <dbl [2]>   <dbl [4]>    <dbl [4]>       20 #>  2          50 <dbl [2]>   <dbl [4]>    <dbl [4]>      100 #>  3          50 <dbl [2]>   <dbl [4]>    <dbl [4]>       20 #>  4          50 <dbl [2]>   <dbl [4]>    <dbl [4]>      100 #>  5          50 <dbl [2]>   <dbl [4]>    <dbl [4]>       20 #>  6          50 <dbl [2]>   <dbl [4]>    <dbl [4]>      100 #>  7          50 <dbl [2]>   <dbl [4]>    <dbl [4]>       20 #>  8          50 <dbl [2]>   <dbl [4]>    <dbl [4]>      100 #>  9          50 <dbl [2]>   <dbl [4]>    <dbl [4]>       20 #> 10          50 <dbl [2]>   <dbl [4]>    <dbl [4]>      100 #> # ℹ 22 more rows"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/coding-simulations.html","id":"run-simulation","dir":"Articles","previous_headings":"Coding Your Own Simulations > Adjust Multiple Parameters","what":"Run Simulation","title":"Coding Simulations","text":"example complete running simulations calculating Power Type II error. However, code can applied either calculate Type error use p-values purposes. {purrr} folks: Note even relatively small sample sizes number iterations 1-3 magnitudes less normally specified simulation studies, processing 32 different simulations took ~20-30 seconds.","code":"# Calculate either Power/T2 error or T1 error depending on your specific needs many_sims <- mapply(   ordinalsimr::run_simulations,   sample_size = info_table$sample_size,   sample_prob = info_table$sample_prob,   prob0 = info_table$prob0_list,   prob1 = info_table$prob1_list,   niter = info_table$niter )   length(many_sims) #> [1] 32 many_sims[1] #> $sample_size_50 #> # A tibble: 20 × 13 #>    Wilcoxon Fisher Chi Squared (No Correct…¹ Chi Squared (Correct…² `Prop. Odds` #>       <dbl>  <dbl>                     <dbl>                  <dbl>        <dbl> #>  1  0.585   0.788                     0.725                  0.725       0.572   #>  2  0.967   0.796                     0.768                  0.768       0.958   #>  3  0.719   0.454                     0.422                  0.422       0.707   #>  4  0.818   0.453                     0.407                  0.407       0.802   #>  5  0.205   0.308                     0.297                  0.297       0.193   #>  6  0.346   0.446                     0.419                  0.419       0.340   #>  7  0.626   0.490                     0.418                  0.418       0.617   #>  8  0.852   0.311                     0.302                  0.302       0.841   #>  9  0.859   0.946                     0.891                  0.891       0.849   #> 10  0.857   0.824                     0.808                  0.808       0.848   #> 11  0.637   0.844                     0.798                  0.798       0.629   #> 12  0.331   0.519                     0.485                  0.485       0.323   #> 13  0.00447 0.0370                    0.0330                 0.0330      0.00317 #> 14  0.777   0.896                     0.823                  0.823       0.765   #> 15  0.301   0.0455                    0.0481                 0.0481      0.287   #> 16  0.647   0.497                     0.447                  0.447       0.634   #> 17  0.0548  0.149                     0.152                  0.152       0.0486  #> 18  0.271   0.312                     0.292                  0.292       0.253   #> 19  0.483   0.888                     0.820                  0.820       0.473   #> 20  0.332   0.181                     0.189                  0.189       0.315   #> # ℹ abbreviated names: ¹​`Chi Squared (No Correction)`, #> #   ²​`Chi Squared (Correction)` #> # ℹ 8 more variables: `Coin Indep. Test` <dbl>, run <int>, y <list>, x <list>, #> #   n_null <int>, n_intervene <dbl>, sample_size <dbl>, K <int> info_table %>%   purrr::pmap(     ~ run_simulations(       sample_size = ..1,       sample_prob = ..2,       prob0 = ..3,       prob1 = ..4,       niter = ..5     ) %>%       bind_rows() %>%       magrittr::extract2(\"p_values\") %>%       calculate_power_t2error(),     .progress = TRUE   )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr-options.html","id":"options","dir":"Articles","previous_headings":"","what":"Options","title":"{ordinalsimr} Options","text":"’re already familiar concept options R, can skip section jump straight next section.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr-options.html","id":"what-are-options","dir":"Articles","previous_headings":"Options","what":"What are options?","title":"{ordinalsimr} Options","text":"’ve never encountered term “options” base R functions options(), getOption(), , much less commonly, .Options() , don’t worry! Simply put, options way customize behavior function package, typically used control appearance output behavior function. fresh, bare installation R several dozen default options number significant figures displayed; specific option can viewed getOption(\"digits\"), list options currently set can viewed options().","code":"# the default value for R installations should be 7 getOption(\"digits\") #> [1] 7  # this number will be printed to 7 *significant* digits 0.093573827689 #> [1] 0.09357383"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr-options.html","id":"changing-options","dir":"Articles","previous_headings":"Options","what":"Changing Options","title":"{ordinalsimr} Options","text":"don’t typically need adjust options pre-chosen values supposed reflect sensible defaults. However, find ’re frequently changing setting , might want set option different value. change option, can use options() function. Extending previous note significant figures, change number digits displayed significant notation, can use options(digits = 3).","code":"# change the number of significant digits to 3 options(digits = 3)  # this number will be printed to 3 *significant* digits 0.093573827689 #> [1] 0.0936"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr-options.html","id":"ordinalsimr-options","dir":"Articles","previous_headings":"","what":"{ordinalsimr} Options","title":"{ordinalsimr} Options","text":"{ordinalsimr} package options can set customize behavior package. particular, options alter behavior Shiny application . functions package affected options, still need pass arguments functions change behavior. options, default values, explanations listed .","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr-options.html","id":"automatically-set-options","dir":"Articles","previous_headings":"{ordinalsimr} Options","what":"Automatically Set Options","title":"{ordinalsimr} Options","text":"options set automatically package loaded. However, set options different values, package respect settings. ordinalsimr.default_iterations = 1000: default number iterations run simulation. ordinalsimr.default_size_min = 30: default minimum sample size simulation. ordinalsimr.default_size_max = 200: default maximum sample size simulation. ordinalsimr.default_ratio = \"50:50\": default ratio two groups simulation.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr-options.html","id":"non-required-options","dir":"Articles","previous_headings":"{ordinalsimr} Options","what":"Non-Required Options","title":"{ordinalsimr} Options","text":"options required set, can set customize behavior Shiny application. ordinalsimr.default_entry_rows = NULL: default number rows display data entry table. set NULL, application fallback value 3 rows. ordinalsimr.default_distributions = NULL: default data set distribution use simulation. set NULL, Shiny app initialize empty data set. option overrides value set ordinalsimr.default_entry_rows.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr-options.html","id":"setting-and-getting-ordinalsimr-options","dir":"Articles","previous_headings":"{ordinalsimr} Options","what":"Setting and Getting {ordinalsimr} Options","title":"{ordinalsimr} Options","text":"get set options package, can use options() function discussed first section vignette. example, set default number iterations 500, can use options(ordinalsimr.default_iterations = 500). also two short-cut functions available setting getting options: set_ordinalsimr_options() get_ordinalsimr_options(). functions wrappers around options() provided convenience.","code":"# get all package options get_ordinalsimr_options()  # set the default number of iterations to 500 opt <- options() set_ordinalsimr_options(   default_iterations = 1000,   default_size_min = 10,   default_size_max = 175,   default_ratio = \"66:34\",   )  # get the current value of the default number of iterations get_ordinalsimr_options()  # reset options options(opt)  # display that the options have been reset get_ordinalsimr_options()"},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr.html","id":"shiny-app","dir":"Articles","previous_headings":"","what":"Shiny App","title":"Using {ordinalsimr}","text":"{ordinalsimr} package wraps Shiny application supporting functions running simulation studies several pre-selected statistical tests applicable ordinal data. Shiny app particularly suited calculating Power Type II error proposed 2-group comparison ordinal endpoint. Available parameters manipulate running tests include: Number simulations run (integer) sample size (integer) distribution ratio group 1 group 2 (ratio form X:X) Group 1 Group 2 distribution probabilities levels ordinal outcome addition parameters running simulation, following can adjusted Distributions page Setting alpha significance level/p-value threshold Setting confidence intervals Power/T2 Error calculations Setting confidence intervals (separately) Type Error Group 1 Group 2 Bug reports feature requests can submitted issues https://github.com/NeuroShepherd/ordinalsimr/issues","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/articles/ordinalsimr.html","id":"using-downloaded-data","dir":"Articles","previous_headings":"Shiny App","what":"Using Downloaded Data","title":"Using {ordinalsimr}","text":"Data downloaded running simulation stored .rds file, can loaded R session using readRDS(). data structured named list 3 elements top level, several sub-elements. summary available information available code . comparison_data results comparing Group 1 Group 2 statistical tests (TII error power) group1_data results comparing Group 1 data (TI error group) group2_data results comparing Group 2 data (TI error group) run_info tables detailed metainformation parameters used run distribution_statistics tables computed TII error, power, associated confidence intervals group1_t1error group2_t1error tables TI error associated confidence intervals","code":"output <- readRDS(\"data-2025-01-19-d8621b-1.rds\") output$comparison_data$distribution_statistics #> # A tibble: 36 × 10 #> # Groups:   Sample Size [6] #>    `Sample Size` test   lower_power_bound upper_power_bound power `Power 95% CI` #>            <int> <chr>              <dbl>             <dbl> <dbl> <chr>          #>  1            30 Wilco…             0.452             0.736  0.6  [0.452, 0.736] #>  2            30 Fisher             0.337             0.626  0.48 [0.337, 0.626] #>  3            30 Chi S…             0.374             0.663  0.52 [0.374, 0.663] #>  4            30 Chi S…             0.374             0.663  0.52 [0.374, 0.663] #>  5            30 Prop.…             0.472             0.753  0.62 [0.472, 0.753] #>  6            30 Coin …             0.472             0.753  0.62 [0.472, 0.753] #>  7            31 Wilco…             0.512             0.788  0.66 [0.512, 0.788] #>  8            31 Fisher             0.337             0.626  0.48 [0.337, 0.626] #>  9            31 Chi S…             0.374             0.663  0.52 [0.374, 0.663] #> 10            31 Chi S…             0.374             0.663  0.52 [0.374, 0.663] #> # ℹ 26 more rows #> # ℹ 4 more variables: lower_t2error_bound <dbl>, upper_t2error_bound <dbl>, #> #   t2_error <dbl>, `TII Error 95% CI` <chr> str(output, max.level = 2) #> List of 3 #>  $ comparison_data:List of 3 #>   ..$ run_info               : tibble [300 × 13] (S3: tbl_df/tbl/data.frame) #>   ..$ distribution_statistics: gropd_df [36 × 10] (S3: grouped_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"groups\")= tibble [6 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. ..- attr(*, \".drop\")= logi TRUE #>   ..$ distribution_plot      :List of 11 #>   .. ..- attr(*, \"class\")= chr [1:2] \"gg\" \"ggplot\" #>  $ group1_data    :List of 2 #>   ..$ run_info      : tibble [300 × 13] (S3: tbl_df/tbl/data.frame) #>   ..$ group1_t1error: gropd_df [36 × 6] (S3: grouped_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"groups\")= tibble [6 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. ..- attr(*, \".drop\")= logi TRUE #>  $ group2_data    :List of 2 #>   ..$ run_info      : tibble [300 × 13] (S3: tbl_df/tbl/data.frame) #>   ..$ group2_t1error: gropd_df [36 × 6] (S3: grouped_df/tbl_df/tbl/data.frame) #>   .. ..- attr(*, \"groups\")= tibble [6 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. ..- attr(*, \".drop\")= logi TRUE"},{"path":"https://neuroshepherd.github.io/ordinalsimr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pat Callahan. Author, maintainer, copyright holder.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Callahan P (2025). “ordinalsimr.” doi:10.5281/zenodo.14697215, https://github.com/neuroshepherd/ordinalsimr.","code":"@Misc{callahan_ordinalsimr_2025,   title = {ordinalsimr},   author = {Pat Callahan},   doi = {10.5281/zenodo.14697215},   year = {2025},   month = {jan},   url = {https://github.com/neuroshepherd/ordinalsimr},   urldate = {2025-01-19},   copyright = {MIT},   date = {2025-01},   abstract = {Simultaneously evaluate multiple ordinal outcome measures. Applied data analysts in particular are faced with uncertainty in choosing appropriate statistical tests for ordinal data. The included 'shiny' applications allows users to simulate outcomes given different ordinal data distributions.}, }"},{"path":"https://neuroshepherd.github.io/ordinalsimr/index.html","id":"ordinalsimr-","dir":"","previous_headings":"","what":"Compare Ordinal Endpoints Using Simulations","title":"Compare Ordinal Endpoints Using Simulations","text":"{ordinalsimr} package assists constructing simulation studies ordinal data comparing two groups. intended facilitate translation methodological advances practical settings e.g. applied statisticians data analysts want determine appropriate statistical test apply data proposed distribution data. package primarily developed Shiny application abstracts away heavier coding aspect setting simulation studies. Instead, users can simply enter parameters data distributions application, save results .rds file. structure Shiny application allows one simulation specified time opposed grid parameters. However, underlying functions running simulations accessible. See vignette(\"ordinalsimr\") template code setting simulations manually.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Compare Ordinal Endpoints Using Simulations","text":"can install development version ordinalsimr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(   \"NeuroShepherd/ordinalsimr\",   build_vignettes = TRUE )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/index.html","id":"running-the-app","dir":"","previous_headings":"","what":"Running the App","title":"Compare Ordinal Endpoints Using Simulations","text":"app can started following code: using app repeatedly, may useful change options application suit needs. See vignette “ordinalsimr-options” information, vignette(\"ordinalsimr-options\", package = \"ordinalsimr\").","code":"ordinalsimr::run_app()"},{"path":"https://neuroshepherd.github.io/ordinalsimr/index.html","id":"recommendations","dir":"","previous_headings":"","what":"Recommendations","title":"Compare Ordinal Endpoints Using Simulations","text":"Simulations 1000s iterations take minutes hours run. generally ok Shiny app, encounter issues, consider running simulations separate R session using functions provided package (rather Shiny app). See vignette “coding-simulations” information, vignette(\"coding-simulations\", package = \"ordinalsimr\").","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/assign_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly assign groups — assign_groups","title":"Randomly assign groups — assign_groups","text":"(Brief description function .)","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/assign_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly assign groups — assign_groups","text":"","code":"assign_groups(   sample_size,   sample_prob,   prob0,   prob1,   seed,   .rng_kind = NULL,   .rng_normal_kind = NULL,   .rng_sample_kind = NULL )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/assign_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly assign groups — assign_groups","text":"sample_size total number people observation. sample_prob vector probability weights obtaining elements vector sampled. prob0 vector probability possible outcome null group prob1 vector probability possible outcome intervention group seed integer specifying seed number .rng_kind seeding info passed withr::with_seed .rng_normal_kind seeding info passed withr::with_seed .rng_sample_kind seeding info passed withr::with_seed","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/assign_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly assign groups — assign_groups","text":"list group assignments","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_power_t2error.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Hypothesis Test Parameters — calculate_power_t2error","title":"Calculate Hypothesis Test Parameters — calculate_power_t2error","text":"function calculates power, Type II error, Type error tests given p-values. Power, Type II error, confidence intervals calculated using `stats::binom.test()` implements Newcombe method.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_power_t2error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Hypothesis Test Parameters — calculate_power_t2error","text":"","code":"calculate_power_t2error(   df,   alpha = 0.05,   power_confidence_int = 95,   n = NA_real_ )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_power_t2error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Hypothesis Test Parameters — calculate_power_t2error","text":"df Data frame column vector p-values statistical test alpha Numeric significance level; defaults 0.05 power_confidence_int confidence interval n Numeric value sample size; repeated convenience","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_power_t2error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Hypothesis Test Parameters — calculate_power_t2error","text":"data frame columns Type 1 error, Type 2 error, power well rows test","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_t1_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Type 1 Error — calculate_t1_error","title":"Calculate Type 1 Error — calculate_t1_error","text":"Calculate Type 1 error distribution, confidence interval around estimate. Type error confidence intervals calculated using `stats::binom.test()` implements Newcombe method.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_t1_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Type 1 Error — calculate_t1_error","text":"","code":"calculate_t1_error(   df,   alpha = 0.05,   t1_error_confidence_int = 95,   n = NA_real_ )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_t1_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Type 1 Error — calculate_t1_error","text":"df data frame alpha significance level t1_error_confidence_int confidence interval n optional numeric input ","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/calculate_t1_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Type 1 Error — calculate_t1_error","text":"data frame","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":".onLoad — .onLoad","title":".onLoad — .onLoad","text":"function called package loaded. sets default options package.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".onLoad — .onLoad","text":"","code":".onLoad(libname, pkgname)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".onLoad — .onLoad","text":"libname libname pkgname package","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/dot-onLoad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".onLoad — .onLoad","text":"invisible","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/dot-set_options_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Option Helper — .set_options_helper","title":"Set Option Helper — .set_options_helper","text":"Set Option Helper","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/dot-set_options_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Option Helper — .set_options_helper","text":"","code":".set_options_helper(option_name, value, additional_msg = NULL)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/dot-set_options_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Option Helper — .set_options_helper","text":"option_name name ordinalsimr option set value value set option additional_msg additional message print setting option","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/dot-set_options_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Option Helper — .set_options_helper","text":"invisible","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/get_ordinalsimr_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ordinalsimr options — get_ordinalsimr_options","title":"Get ordinalsimr options — get_ordinalsimr_options","text":"Returns ordinalsimr options console.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/get_ordinalsimr_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ordinalsimr options — get_ordinalsimr_options","text":"","code":"get_ordinalsimr_options()"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/get_ordinalsimr_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ordinalsimr options — get_ordinalsimr_options","text":"list ordinalsimr options","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/get_ordinalsimr_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ordinalsimr options — get_ordinalsimr_options","text":"","code":"get_ordinalsimr_options() #> $ordinalsimr.default_iterations #> [1] 20 #>  #> $ordinalsimr.default_size_min #> [1] 30 #>  #> $ordinalsimr.default_size_max #> [1] 35 #>  #> $ordinalsimr.default_ratio #> [1] \"50:50\" #>  #> $ordinalsimr.default_distributions #>   c.0.4..0.3..0.3. c.0.8..0.1..0.1. #> 1              0.4              0.8 #> 2              0.3              0.1 #> 3              0.3              0.1 #>  #> $ordinalsimr.default_entry_rows #> NULL #>"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinal_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinal outcome tests — ordinal_tests","title":"Ordinal outcome tests — ordinal_tests","text":"metafunction runs statistical tests listed , returns p-values named vector.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinal_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinal outcome tests — ordinal_tests","text":"","code":"ordinal_tests(x, y, included = \"all\", ...)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinal_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinal outcome tests — ordinal_tests","text":"x Group one y Group two included character vector tests included. Default \"\" ... Placeholder additional arguments functions","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinal_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordinal outcome tests — ordinal_tests","text":"named matrix probabilities test function designed run 6 tests default. want run subset tests, can specify `included` argument. following values possible: \"Wilcoxon\" \"Fisher\" \"Chi Squared (Correction)\" \"Chi Squared (Correction)\" \"Prop. Odds\" \"Coin Indep. Test\" option primarily use Shiny application.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinal_tests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ordinal outcome tests — ordinal_tests","text":"stats::wilcox.test() stats::fisher.test(simulate.p.value = TRUE) stats::chisq.test(correct = FALSE) stats::chisq.test(correct = TRUE) rms::lrm() coin::independence_test(ytrafo = coin::rank_trafo)","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinalsimr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ordinalsimr: Compare Ordinal Endpoints Using Simulations — ordinalsimr-package","title":"ordinalsimr: Compare Ordinal Endpoints Using Simulations — ordinalsimr-package","text":"Simultaneously evaluate multiple ordinal outcome measures. Applied data analysts particular faced uncertainty choosing appropriate statistical tests ordinal data. included 'shiny' application allows users simulate outcomes given different ordinal data distributions.","code":""},{"path":[]},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/ordinalsimr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ordinalsimr: Compare Ordinal Endpoints Using Simulations — ordinalsimr-package","text":"Maintainer: Pat Callahan patricktcallahan18@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/parse_ratio_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Ratio Text — parse_ratio_text","title":"Parse Ratio Text — parse_ratio_text","text":"function parses text ratios written format 1-2 digit numbers separated colon trailing another 1-2 digit number. text processed numeric vector length 2 containing two numbers.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/parse_ratio_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Ratio Text — parse_ratio_text","text":"","code":"parse_ratio_text(text)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/parse_ratio_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Ratio Text — parse_ratio_text","text":"text string form e.g. 5:95 70:30","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/parse_ratio_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Ratio Text — parse_ratio_text","text":"Numeric vector length 2","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/parse_ratio_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Ratio Text — parse_ratio_text","text":"","code":"parse_ratio_text(\"70:30\") #> [1] 0.7 0.3"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_distribution_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Distribution — plot_distribution_results","title":"Plot Distribution — plot_distribution_results","text":"function takes wide table p-values (.e. one column statistical test), converts long format, creates density plot p-values test.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_distribution_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Distribution — plot_distribution_results","text":"","code":"plot_distribution_results(df, alpha = 0.05, outlier_removal = 0.1)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_distribution_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Distribution — plot_distribution_results","text":"df data frame column set p-values different statistical test alpha numeric. significance level outlier_removal numeric. set x-axis scale maximum proportion","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_distribution_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Distribution — plot_distribution_results","text":"ggplot object","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Test Power — plot_power","title":"Plot Test Power — plot_power","text":"Plot Test Power","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Test Power — plot_power","text":"","code":"plot_power(df, power_threshold = 0.8, ci_band = TRUE)"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Test Power — plot_power","text":"df dataframe p-values sample_size column power_threshold numeric. desired power threshold ci_band logical. whether include confidence interval band around power estimate","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/plot_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Test Power — plot_power","text":"ggplot object","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the Shiny Application — run_app","text":"NULL, function called side effects","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Simulations — run_simulations","title":"Run Simulations — run_simulations","text":"Run Simulations","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Simulations — run_simulations","text":"","code":"run_simulations(   sample_size,   sample_prob,   prob0,   prob1,   niter,   included = \"all\",   .rng_kind = NULL,   .rng_normal_kind = NULL,   .rng_sample_kind = NULL )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Simulations — run_simulations","text":"sample_size Total number trial participants sample_prob vector probability weights obtaining elements vector sampled. prob0 Vector probabilities control group prob1 Vector probabilities intervention group niter Number simulation iterations complete#' included character vector tests included. Default \"\" .rng_kind seeding info passed withr::with_seed .rng_normal_kind seeding info passed withr::with_seed .rng_sample_kind seeding info passed withr::with_seed","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Simulations — run_simulations","text":"list lists; sub-list elements include `p_values` matrix p values tests iteration, `initial_groups` group assignment information iteration","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/run_simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Simulations — run_simulations","text":"","code":"run_simulations(   sample_size = c(40, 50, 60),   sample_prob = c(0.5, 0.5),   prob0 = c(0.1, 0.2, 0.3, 0.4),   prob1 = c(0.6, 0.2, 0.1, 0.1),   niter = 40 ) #> $sample_size_40 #> # A tibble: 40 × 13 #>     Wilcoxon   Fisher Chi Squared (No Corr…¹ Chi Squared (Correct…² `Prop. Odds` #>        <dbl>    <dbl>                  <dbl>                  <dbl>        <dbl> #>  1   6.95e-4 0.001000              0.00134                0.00134   0.000310     #>  2   2.50e-3 0.00700               0.0107                 0.0107    0.00157      #>  3   6.18e-4 0.00450               0.00684                0.00684   0.000278     #>  4   5.96e-3 0.0275                0.0231                 0.0231    0.00355      #>  5   3.07e-1 0.495                 0.512                  0.512     0.297        #>  6   4.63e-2 0.140                 0.136                  0.136     0.0364       #>  7   4.86e-4 0.00200               0.00540                0.00540   0.000229     #>  8   7.24e-3 0.0295                0.0315                 0.0315    0.00507      #>  9   4.20e-3 0.0230                0.0235                 0.0235    0.00261      #> 10   1.69e-6 0.000500              0.0000144              0.0000144 0.0000000743 #> # ℹ 30 more rows #> # ℹ abbreviated names: ¹​`Chi Squared (No Correction)`, #> #   ²​`Chi Squared (Correction)` #> # ℹ 8 more variables: `Coin Indep. Test` <dbl>, run <int>, y <list>, x <list>, #> #   n_null <int>, n_intervene <dbl>, sample_size <dbl>, K <int> #>  #> $sample_size_50 #> # A tibble: 40 × 13 #>      Wilcoxon  Fisher Chi Squared (No Corr…¹ Chi Squared (Correct…² `Prop. Odds` #>         <dbl>   <dbl>                  <dbl>                  <dbl>        <dbl> #>  1    4.73e-6 5.00e-4             0.0000592              0.0000592       4.87e-7 #>  2    7.29e-6 5.00e-4             0.0000585              0.0000585       1.42e-6 #>  3    1.54e-3 7.50e-3             0.00734                0.00734         1.04e-3 #>  4    1.67e-3 5.00e-4             0.000481               0.000481        5.13e-4 #>  5    7.58e-3 3.55e-2             0.0501                 0.0501          5.95e-3 #>  6    2.09e-5 5.00e-4             0.000113               0.000113        3.03e-6 #>  7    4.61e-6 5.00e-4             0.0000425              0.0000425       7.76e-7 #>  8    2.69e-5 5.00e-4             0.000328               0.000328        6.86e-6 #>  9    2.78e-5 5.00e-4             0.000262               0.000262        8.94e-6 #> 10    1.46e-7 5.00e-4             0.00000138             0.00000138      4.25e-9 #> # ℹ 30 more rows #> # ℹ abbreviated names: ¹​`Chi Squared (No Correction)`, #> #   ²​`Chi Squared (Correction)` #> # ℹ 8 more variables: `Coin Indep. Test` <dbl>, run <int>, y <list>, x <list>, #> #   n_null <int>, n_intervene <dbl>, sample_size <dbl>, K <int> #>  #> $sample_size_60 #> # A tibble: 40 × 13 #>     Wilcoxon   Fisher Chi Squared (No Corr…¹ Chi Squared (Correct…² `Prop. Odds` #>        <dbl>    <dbl>                  <dbl>                  <dbl>        <dbl> #>  1   1.74e-5 0.000500            0.000238               0.000238    0.00000511   #>  2   1.37e-6 0.000500            0.00000118             0.00000118  0.000000256  #>  3   4.37e-5 0.000500            0.000474               0.000474    0.0000191    #>  4   6.83e-5 0.00150             0.000460               0.000460    0.0000232    #>  5   1.19e-4 0.00200             0.00109                0.00109     0.0000631    #>  6   1.10e-5 0.001000            0.000104               0.000104    0.00000243   #>  7   2.77e-7 0.000500            0.00000160             0.00000160  0.0000000174 #>  8   1.41e-5 0.000500            0.000214               0.000214    0.00000392   #>  9   2.09e-7 0.000500            0.000000823            0.000000823 0.0000000137 #> 10   5.22e-7 0.000500            0.00000421             0.00000421  0.0000000516 #> # ℹ 30 more rows #> # ℹ abbreviated names: ¹​`Chi Squared (No Correction)`, #> #   ²​`Chi Squared (Correction)` #> # ℹ 8 more variables: `Coin Indep. Test` <dbl>, run <int>, y <list>, x <list>, #> #   n_null <int>, n_intervene <dbl>, sample_size <dbl>, K <int> #>"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/set_ordinalsimr_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set ordinalsimr Shiny App Default Values — set_ordinalsimr_options","title":"Set ordinalsimr Shiny App Default Values — set_ordinalsimr_options","text":"Set ordinalsimr Shiny App Default Values","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/set_ordinalsimr_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set ordinalsimr Shiny App Default Values — set_ordinalsimr_options","text":"","code":"set_ordinalsimr_options(   default_iterations,   default_size_min,   default_size_max,   default_ratio,   default_distributions,   default_entry_rows )"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/set_ordinalsimr_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set ordinalsimr Shiny App Default Values — set_ordinalsimr_options","text":"default_iterations number iterations run default_size_min number small end sample size range default_size_max number large end sample size range default_ratio text ratio number levels two groups, format \"50:50\" default_distributions data frame distributions levels two groups default_entry_rows number rows initialize (empty) data frame ","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/set_ordinalsimr_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set ordinalsimr Shiny App Default Values — set_ordinalsimr_options","text":"invisible","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/set_ordinalsimr_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set ordinalsimr Shiny App Default Values — set_ordinalsimr_options","text":"","code":"# Set the default values for the ordinalsimr Shiny app  set_ordinalsimr_options(   default_iterations = 1000,   default_size_min = 10,   default_size_max = 100,   default_ratio = \"50:50\",   default_distributions = data.frame(c(0.4, 0.3, 0.3), c(0.8, 0.1, 0.1)) ) #> Setting ordinalsimr.default_iterations to 1000 #> Setting ordinalsimr.default_size_min to 10 #> Setting ordinalsimr.default_size_max to 100 #> Setting ordinalsimr.default_ratio to 50:50 #> Setting ordinalsimr.default_distributions to c(0.4, 0.3, 0.3)c(0.8, 0.1, 0.1)  # Values can be either overwritten or unset by setting them to NULL. The Shiny # app still has backup values if these options are not set. Not all arguments # need to be provided  set_ordinalsimr_options(   default_iterations = 500, # Ex: update argument   default_size_min = NULL, # Ex: unset argument   default_size_max = NULL, # Ex: unset argument   # default_ratio = NULL, # Ex: arg not provided (by commenting out)   default_distributions = NULL ) #> Setting ordinalsimr.default_iterations to 500 #> Setting ordinalsimr.default_size_min to  #> Setting ordinalsimr.default_size_max to  #> Setting ordinalsimr.default_distributions to"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_one_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation Data for One Group — simulation_data_one_group","title":"Simulation Data for One Group — simulation_data_one_group","text":"Simulated p-values metadata two group comparison. Useful Type error calculations.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_one_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation Data for One Group — simulation_data_one_group","text":"","code":"simulation_data_one_group"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_one_group.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulation Data for One Group — simulation_data_one_group","text":"## `simulation_data_one_group` list p_values data frame p-values run test initial_groups nested list information simulation run","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_two_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation Data for Two Groups — simulation_data_two_groups","title":"Simulation Data for Two Groups — simulation_data_two_groups","text":"Simulated p-values metadata two group comparison. Useful Type II error power calculations.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_two_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation Data for Two Groups — simulation_data_two_groups","text":"","code":"simulation_data_two_groups"},{"path":"https://neuroshepherd.github.io/ordinalsimr/reference/simulation_data_two_groups.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulation Data for Two Groups — simulation_data_two_groups","text":"## `simulation_data_two_groups` list p_values data frame p-values run test initial_groups nested list information simulation run","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/news/index.html","id":"ordinalsimr-023","dir":"Changelog","previous_headings":"","what":"ordinalsimr 0.2.3","title":"ordinalsimr 0.2.3","text":"wilcox.test() now defaults exact = FALSE fix failing tests distributions","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/news/index.html","id":"ordinalsimr-022","dir":"Changelog","previous_headings":"","what":"ordinalsimr 0.2.2","title":"ordinalsimr 0.2.2","text":"CRAN release: 2025-06-25 Update tests fit updates {ggplot2} package use S7","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/news/index.html","id":"ordinalsimr-021","dir":"Changelog","previous_headings":"","what":"ordinalsimr 0.2.1","title":"ordinalsimr 0.2.1","text":"CRAN release: 2025-06-04 Allow users specify step size sequence sample sizes Shiny app Fix bug progress bars update sample size length 1 display progress bars underlying simulation running Add confidence interval toggle button Shiny power plot Replace distribution plots box plots Shiny app better visualize distribution data Remove magrittr dependency Use dynamic labeling x-axis Shiny app better reflect data plotted","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/news/index.html","id":"ordinalsimr-020","dir":"Changelog","previous_headings":"","what":"ordinalsimr 0.2.0","title":"ordinalsimr 0.2.0","text":"CRAN release: 2025-03-07 callr::r_bg() now used - within- group simulations Shiny application enable user continue using application simulation running, run processes parallel one another “Kill Simulations” button added Shiny application allow user stop simulation process taking long. Simulations still killed application closed Progress bars added Shiny application show progress simulations, user can open close progress bars button Additional validation checks added Shiny application control rendering plots tables require reactive elements fisher.test() now defaults simulate.p.value = TRUE. reduce computational load time particularly larger group sizes simulations larger number ordinal categories package now requires “bslib” version 0.9.0 higher use navbar_options option page_navbar() Change DOI citation file general Zenodo repository link modal pop-indicating limitations running app ShinyApps.io available, triggered option .shinyapps.deployment = TRUE. inform users app may run expected ShinyApps.io due computational intensity spawning multiple R processes.","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/news/index.html","id":"ordinalsimr-013","dir":"Changelog","previous_headings":"","what":"ordinalsimr 0.1.3","title":"ordinalsimr 0.1.3","text":"CRAN release: 2025-01-29 Updates match CRAN submission standards","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/news/index.html","id":"ordinalsimr-011","dir":"Changelog","previous_headings":"","what":"ordinalsimr 0.1.1","title":"ordinalsimr 0.1.1","text":"Create DOI via Zenodo add CITATION file","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/news/index.html","id":"ordinalsimr-010","dir":"Changelog","previous_headings":"","what":"ordinalsimr 0.1.0","title":"ordinalsimr 0.1.0","text":"Significantly refined UI Allowed options pre-setting simulation inputs, created .onLoad set values, created set_ordinalsimr_options function allow users set values . Added custom CSS file Updated version {renv} use Added {ordinalsimr} ignored packages renv/settings.json Use bslib::bs_theme(version = 5, bootswatch = \"materia\") theming app Create zipped download report, Rmd file create report, data generated simulation Expose parameters downloadable report Create tests .onLoad behavior","code":""},{"path":"https://neuroshepherd.github.io/ordinalsimr/news/index.html","id":"ordinalsimr-0009000","dir":"Changelog","previous_headings":"","what":"ordinalsimr 0.0.0.9000","title":"ordinalsimr 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
